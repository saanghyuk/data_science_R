sex=h0901_4,
birth=h0901_5,
income=h09_din)
welfare$sex <- ifelse(welfare$sex == 1, "male", "female")
welfare$age <- 2014 - welfare$birth + 1
welfare$ageg <- welfare %>%
mutate(ageg = ifelse(welfare$age <30, "young", ifelse(welfare$age <=59, "middle", "old"))) %>%
group_by(ageg) %>%
summarise(mean_income = mean(income))
welfare
welfare %>%
mutate(ageg = ifelse(welfare$age <30, "young", ifelse(welfare$age <=59, "middle", "old"))) %>%
group_by(ageg) %>%
summarise(mean_income = mean(income))
welfare$ageg <- welfare %>%
mutate(ageg = ifelse(welfare$age <30, "young", ifelse(welfare$age <=59, "middle", "old"))) %>%
welfare
welfare$ageg <- welfare %>%
mutate(ageg = ifelse(welfare$age <30, "young", ifelse(welfare$age <=59, "middle", "old"))) %>%
welfare
welfare$ageg <- welfare %>%
mutate(ageg = ifelse(welfare$age <30, "young", ifelse(welfare$age <=59, "middle", "old"))) %>%
welfare
welfare <-raw_welfare
welfare <- rename(welfare,
sex=h0901_4,
birth=h0901_5,
income=h09_din)
welfare$sex <- ifelse(welfare$sex == 1, "male", "female")
welfare$age <- 2014 - welfare$birth + 1
welfare$ageg <- welfare %>%
mutate(ageg = ifelse(welfare$age <30, "young", ifelse(welfare$age <=59, "middle", "old"))) %>%
welfare
welfare$ageg <- welfare %>%
mutate(ageg = ifelse(welfare$age <30, "young", ifelse(welfare$age <=59, "middle", "old"))) %>%
welfare
welfare <-raw_welfare
welfare <- rename(welfare,
sex=h0901_4,
birth=h0901_5,
income=h09_din)
welfare$sex <- ifelse(welfare$sex == 1, "male", "female")
welfare$age <- 2014 - welfare$birth + 1
str(welfare)
welfare$ageg <- welfare %>%
mutate(ageg = ifelse(welfare$age <30, "young", ifelse(welfare$age <=59, "middle", "old")))
welfare
table(welfare$ageg)
table(welfare$ageg)
welfare
welfare %>%
mutate(ageg = ifelse(welfare$age <30, "young", ifelse(welfare$age <=59, "middle", "old")))
welfare %>%
mutate(ageg = ifelse(welfare$age <30, "young", ifelse(welfare$age <=59, "middle", "old")))
welfare %>%
mutate(ageg = ifelse(welfare$age <30, "young", ifelse(welfare$age <=59, "middle", "old")))
welfare %>%
mutate(ageg = ifelse(welfare$age <30, "young", ifelse(welfare$age <=59, "middle", "old")))
welfare <-raw_welfare
welfare <- rename(welfare,
sex=h0901_4,
birth=h0901_5,
income=h09_din)
e
welfare$age <- 2014 - welfare$birth + 1
# 2. Age & Income
age_income <-   welfare %>%
group_by(age) %>%
summarise(mean_income = mean(income))
ggplot(data=age_income, aes(x=age, y=mean_income)) + geom_point()
welfare %>%
mutate(ageg = ifelse(welfare$age <30, "young", ifelse(welfare$age <=59, "middle", "old")))
welfare %>%
mutate(ageg = ifelse(age <30, "young", ifelse(age <=59, "middle", "old")))
welfare %>%
mutate(ageg = ifelse(age <30, "young", ifelse(age <=59, "middle", "old")))
welfare$age
welfare %>%
mutate(ageg = ifelse(age <30, "young", ifelse(age <=59, "middle", "old")))
welfare <- welfare %>%
mutate(ageg = ifelse(age <30, "young", ifelse(age <=59, "middle", "old")))
welfare$age
welfare$ageg
table(welfare$ageg)
qplot(welfare$ageg)
welfare_income <- welfare %>%
filter(ageg != "young") %>%
group_by(ageg) %>%
summarise(mean_income = mean(income))
welfare_income
qplot(welfare_income)
ggplot(data=welfare_income, aes(x=ageg, y=mean_income)) + geom_bar()
ggplot(data=welfare_income, aes(x=ageg, y=mean_income)) + geom_cil()
ggplot(data=welfare_income, aes(x=ageg, y=mean_income)) + geom_col()
# 연령대 및 성별에 따른 소득
welfare %>%
group_by(ageg, sex) %>%
summarise(mean_income = mean(income))
# 연령대 및 성별에 따른 소득
welfare %>%
filter(ageg != "young") %>%
group_by(ageg, sex) %>%
summarise(mean_income = mean(income))
# 연령대 및 성별에 따른 소득
sex_income <-  welfare %>%
filter(ageg != "young") %>%
group_by(ageg, sex) %>%
summarise(mean_income = mean(income))
# 연령대 및 성별에 따른 소득
sex_income <- welfare %>%
filter(ageg != "young") %>%
group_by(ageg, sex) %>%
summarise(mean_income = mean(income))
sex_income
ggplot(data=sex_income, aex(x=ageg, y=mean_income, filee=sex)) + geom_col()
ggplot(data=sex_income, aes(x=ageg, y=mean_income, filee=sex)) + geom_col()
ggplot(data=sex_income, aes(x=ageg, y=mean_income, fill=sex)) + geom_col()
sex_income$sex
sex_income$sex <-  ifelse(sex_income$sex == 1, "male", "female")
ggplot(data=sex_income, aes(x=ageg, y=mean_income, fill=sex)) + geom_col()
ggplot(data=sex_income, aes(x=ageg, y=mean_income, fill=sex)) + geom_col(position="dodge")
# 두 집단 평균 차이 검정.
read.csv(file="htest01.csv", header=TRUE)
# 두 집단 평균 차이 검정.
read.csv(file="source/Data/htest01.csv", header=TRUE)
# 두 집단 평균 차이 검정.
rawN3 <-read.csv(file="source/Data/htest01.csv", header=TRUE)
groupB <- rawN3[rawN3$group=='B', 1:2]
groupA
groupA <- rawN3[rawN3$group=='A', 1:2]
groupB <- rawN3[rawN3$group=='B', 1:2]
groupA
groupB
mean(groupA[, 2])
mean(groupB[, 2])
# Phase 2
# Testing Normality
shapiro.test(groupA[,2])
qqnorm(groupA[, 2])
qqline(groupA[, 2])
qqnorm(groupA[, 2])
qqnorm(groupA[, 2])
qqline(groupA[, 2])
shapiro.test(groupB[,2])
qqline(groupB[, 2])
qqnorm(groupA[, 2])
qqline(groupB[, 2])
shapiro.test(groupB[,2])
qqnorm(groupB[, 2])
qqline(groupB[, 2])
# Phase 3
# Variance Test
# Decide whether Variance Of A and B is same.
var.test(groupA[,2], groupB[, 2])
# t.test
t.test(groupA[, 2], groupB[, 2], alternative = "less", var.equal = TRUE)
##################
#Each Group has 10 samples
##################
rawN10 <-read.csv(file="source/Data/htest02.csv", header=TRUE)
groupB2 <- rawN3[rawN10$group=='B', 1:2]
groupA2 <- rawN3[rawN10$group=='A', 1:2]
mean(groupA2[,2])
mean(groupB2[,2])
groupA2 <- rawN3[rawN10$group=='A', 1:2]
groupB2 <- rawN3[rawN10$group=='B', 1:2]
group2
groupA2
##################
#Each Group has 10 samples
##################
rawN10 <-read.csv(file="source/Data/htest02.csv", header=TRUE)
rawN10
groupA2 <- rawN3[rawN10$group=='A', 1:2]
##################
#Each Group has 10 samples
##################
rawN10 <-read.csv(file="source/Data/htest02.csv", header=TRUE)
groupA2 <- rawN10[rawN10$group=='A', 1:2]
groupB2 <- rawN10[rawN10$group=='B', 1:2]
mean(groupA2[,2])
mean(groupB2[,2])
# Phase 2
# Testing Normality
shapiro.test(groupA2[,2])
qqnorm(groupA2[, 2])
qqline(groupA2[, 2])
shapiro.test(groupB2[,2])
qqnorm(groupB2[, 2])
qqline(groupB2[, 2])
# Phase 3
# Variance Test
# Decide whether Variance Of A and B is same.
var.test(groupA2[,2], groupB2[, 2])
# Phase 3
# Variance Test
# Decide whether Variance Of A and B is same.
var.test(groupA2[,2], groupB2[, 2])
# Phase 4
# t.test
t.test(groupA[, 2], groupB[, 2], alternative = "less", var.equal = FALSE)
# Phase 4
# t.test
t.test(groupA[, 2], groupB[, 2], alternative = "less", var.equal = FALSE)
# Phase 4
# t.test
t.test(groupA[, 2], groupB[, 2], alternative = "less", var.equal = FALSE)
# 대응표본 T검정
raw_d <- read.csv(file="source/Data/htest02d.csv", header=TRUE)
raw_d
groupBd <- raw_d[,2]
groupAd <- raw_d[,1]
groupBd <- raw_d[,2]
mean(groupAd)
mean(groupBd)
# 데이터 정규성 검정
d = groupAd - groupBd
shapiro.test(d)
# 데이터 정규성 검정
d = groupAd - groupBd
shapiro.test(d)
qqline(d)
qqnorm(d)
qqline(d)
qqline(d)
# T-test
# paired
t.test(groupAd, groupBd, alternative = "less", paired = TRUE)
# Z-검정
# 데이터 갯수 30개 넘는 경우. 대표본
rawN30 <- read.csv(file="source/Data/htest03.csv", header=TRUE)
groupA3 <- rawN30[rawN30$group=="A", 1:2]
groupA3 <- rawN30[rawN30$group=="B", 1:2]
groupA3 <- rawN30[rawN30$group=="A", 1:2]
groupB3 <- rawN30[rawN30$group=="B", 1:2]
mean(groupA3)
groupA3
mean(groupA3[, 2])
mean(groupB3[, 2])
z.test(groupA3[, 2], groupB3[, 2])
cat("p-value =", p_value) }
mean_x1 = mean(x1) mean_x2 = mean(x2)
mean_x2 = mean(x2)
# R에서는 따로 z-test준비하지 않는다.
z.test <- function(x1, x2){ n_x1 = length(x1)
n_x2 = length(x2)
mean_x1 = mean(x1)
mean_x2 = mean(x2)
cat("\n")
cat("\tTwo Sample z-test\n") cat("\n")
cat("mean of x1:", mean_x1, "\n") cat("mean of x2:", mean_x2, "\n")
var_x1 = var(x1) var_x2 = var(x2)
z = (mean_x1 - mean_x2)/sqrt((var_x1/n_x1)+(var_x2/n_x2)) abs_z = abs(z)
cat("z =", abs_z, "\n")
p_value = 1-pnorm(abs_z)
cat("p-value =", p_value)
}
# R에서는 따로 z-test준비하지 않는다.
z.test <- function(x1, x2){ n_x1 = length(x1)
n_x2 = length(x2)
mean_x1 = mean(x1)
mean_x2 = mean(x2)
cat("\n")
cat("\tTwo Sample z-test\n") cat("\n")
cat("mean of x1:", mean_x1, "\n") cat("mean of x2:", mean_x2, "\n")
var_x1 = var(x1) var_x2 = var(x2)
z = (mean_x1 - mean_x2)/sqrt((var_x1/n_x1)+(var_x2/n_x2)) abs_z = abs(z)
cat("z =", abs_z, "\n")
p_value = 1-pnorm(abs_z)
cat("p-value =", p_value)
}
var_x2 = var(x2)
z = (mean_x1 - mean_x2)/sqrt((var_x1/n_x1)+(var_x2/n_x2))
# R에서는 따로 z-test준비하지 않는다.
z.test <- function(x1, x2){
n_x1 = length(x1)
n_x2 = length(x2)
mean_x1 = mean(x1)
mean_x2 = mean(x2)
cat("\n")
cat("\tTwo Sample z-test\n") cat("\n")
cat("mean of x1:", mean_x1, "\n") cat("mean of x2:", mean_x2, "\n")
var_x1 = var(x1)
var_x2 = var(x2)
z = (mean_x1 - mean_x2)/sqrt((var_x1/n_x1)+(var_x2/n_x2))
abs_z = abs(z)
cat("z =", abs_z, "\n")
p_value = 1-pnorm(abs_z)
cat("p-value =", p_value)
}
cat("mean of x2:", mean_x2, "\n")
# R에서는 따로 z-test준비하지 않는다.
z.test <- function(x1, x2){
n_x1 = length(x1)
n_x2 = length(x2)
mean_x1 = mean(x1)
mean_x2 = mean(x2)
cat("\n")
cat("\tTwo Sample z-test\n") cat("\n")
cat("mean of x1:", mean_x1, "\n")
cat("mean of x2:", mean_x2, "\n")
var_x1 = var(x1)
var_x2 = var(x2)
z = (mean_x1 - mean_x2)/sqrt((var_x1/n_x1)+(var_x2/n_x2))
abs_z = abs(z)
cat("z =", abs_z, "\n")
p_value = 1-pnorm(abs_z)
cat("p-value =", p_value)
}
# R에서는 따로 z-test준비하지 않는다.
z.test <- function(x1, x2){
n_x1 = length(x1)
n_x2 = length(x2)
mean_x1 = mean(x1)
mean_x2 = mean(x2)
cat("\n")
cat("\tTwo Sample z-test\n") cat("\n")
cat("mean of x1:", mean_x1, "\n")
cat("mean of x2:", mean_x2, "\n")
var_x1 = var(x1)
var_x2 = var(x2)
z = (mean_x1 - mean_x2)/sqrt((var_x1/n_x1)+(var_x2/n_x2))
abs_z = abs(z)
cat("z =", abs_z, "\n")
p_value = 1-pnorm(abs_z)
cat("p-value =", p_value)
}
# R에서는 따로 z-test준비하지 않는다.
# R에서는 따로 z-test준비하지 않는다.
z.test <- function(x1, x2){
n_x1 = length(x1)
n_x2 = length(x2)
mean_x1 = mean(x1)
mean_x2 = mean(x2)
cat("\n")
cat("\tTwo Sample z-test\n") cat("\n")
cat("mean of x1:", mean_x1, "\n")
cat("mean of x2:", mean_x2, "\n")
var_x1 = var(x1)
var_x2 = var(x2)
z = (mean_x1 - mean_x2)/sqrt((var_x1/n_x1)+(var_x2/n_x2))
abs_z = abs(z)
cat("z =", abs_z, "\n")
p_value = 1-pnorm(abs_z)
cat("p-value =", p_value)
}
cat("p-value =", p_value) }
cat("p-value =", p_value)}
# R에서는 따로 z-test준비하지 않는다.
z.test <- function(x1, x2){
n_x1 = length(x1)
n_x2 = length(x2)
mean_x1 = mean(x1)
mean_x2 = mean(x2)
cat("\n")
cat("\tTwo Sample z-test\n") cat("\n")
cat("mean of x1:", mean_x1, "\n")
cat("mean of x2:", mean_x2, "\n")
var_x1 = var(x1)
var_x2 = var(x2)
z = (mean_x1 - mean_x2)/sqrt((var_x1/n_x1)+(var_x2/n_x2))
abs_z = abs(z)
cat("z =", abs_z, "\n")
p_value = 1-pnorm(abs_z)
cat("p-value =", p_value)
}
cat("\n")
# R에서는 따로 z-test준비하지 않는다.
z.test <- function(x1, x2){
n_x1 = length(x1)
n_x2 = length(x2)
mean_x1 = mean(x1)
mean_x2 = mean(x2)
cat("\n")
cat("\tTwo Sample z-test\n")
cat("\n")
cat("mean of x1:", mean_x1, "\n")
cat("mean of x2:", mean_x2, "\n")
var_x1 = var(x1)
var_x2 = var(x2)
z = (mean_x1 - mean_x2)/sqrt((var_x1/n_x1)+(var_x2/n_x2))
abs_z = abs(z)
cat("z =", abs_z, "\n")
p_value = 1-pnorm(abs_z)
cat("p-value =", p_value)
}
z.test(groupA3[, 2], groupB3[, 2])
# ANOVA
rawN30 <- read.csv(file="source/Data/htest04.csv", header=TRUE)
# ANOVA
raw_anova <- read.csv(file="source/Data/htest04.csv", header=TRUE)
groupA4 <- raw_anova[raw_anoova$group=='A', 1:2]
groupB4 <- raw_anova[raw_anoova$group=='B', 1:2]
groupC4 <- raw_anova[raw_anoova$group=='C', 1:2]
# ANOVA
raw_anova <- read.csv(file="source/Data/htest04.csv", header=TRUE)
groupA4 <- raw_anova[raw_anoova$group=='A', 1:2]
groupA4 <- raw_anova[raw_anova$group=='A', 1:2]
groupB4 <- raw_anova[raw_anova$group=='B', 1:2]
groupC4 <- raw_anova[raw_anova$group=='C', 1:2]
mean(groupA4)
mean(groupB4)
mean(groupC4)
# ANOVA
raw_anova <- read.csv(file="source/Data/htest04.csv", header=TRUE)
raw_anova
groupA4 <- raw_anova[raw_anova$group=='A', 1:2]
groupB4 <- raw_anova[raw_anova$group=='B', 1:2]
groupC4 <- raw_anova[raw_anova$group=='C', 1:2]
mean(groupA4)
mean(groupB4)
mean(groupC4)
groupA4
mean(groupA4[, 2])
mean(groupB4[, 2])
mean(groupC4[, 2])
# Normality Test
shapiro.test(groupA4[, 2])
shapiro.test(groupB4[, 2])
shapiro.test(groupC4[, 2])
qqnorm(groupA4[, 2])
qqline(groupA4[, 2])
qqnorm(groupB4[, 2])
qqline(groupB4[, 2])
qqnorm(groupC4[, 2])
qqline(groupC4[, 2])
# 분산 동질성 검정.
install.packages("lawstat")
levene.test(raw_anova$height, raw_anov$group)
library(lawstat)
levene.test(raw_anova$height, raw_anov$group)
levene.test(raw_anova$height, raw_anova$group)
bartlett.test(height~group, data=raw_anova)
# ANOVA
rawAnova <- aov(height~group, data=raw_anova)
summary(rawAnova)
rawTable <- table(raw_chisq)
# Chi Square Testing
raw_chisq <- read.csv(file="source/Data/htest01.csv", header=TRUE)
rawTable <- table(raw_chisq)
rawTable
# Chi Square Testing
raw_chisq <- read.csv(file="source/Data/htest01.csv", header=TRUE)
rawTable <- table(raw_chisq)
rawTable
# Chi Square Testing
raw_chisq <- read.csv(file="source/Data/htest05.csv", header=TRUE)
rawTable <- table(raw_chisq)
rawTable
chisq.test(rawTable, correct=FALSE)
packages.install(Caret)
install.packages("caret", dependencies = TRUE)
read.csv(file.choose())
wine_data = read.csv(file.choose())
str(wind_data)
str(wine_data)
table(wine_data$Class)
# Target = Class: 1, 2, 3
wine_data$Class <- as.factor(wine_data$Class)
wine_data %>% head(5)
head(wine_data)
str(wine_data)
# Train, Test Split
analdata <- wine_data
set.seed(2020)
sample(nrow(analdata), nrow(analdata)*0.7)
length(wine_data)
nrow(wine_data)
datatotal
datatotal <- sort(sample(nrow(analdata), nrow(analdata)*0.7))
datatotal
wine_data[0, ]
wine_data[0, ]
wine_data[1, ]
test <- wine_data[-datatotal, ]
train <- wine_data[datatotal, ]
test <- wine_data[-datatotal, ]
test_x <- test_x[, 1:13]
test_y <- test[, 14]
# sample(nrow(analdata), nrow(analdata)*0.7)
# 표본 추출. sample(a, b) a 중 b개 뽑겠다.
# In R, the indexing begins from 1.
datatotal <- sort(sample(nrow(analdata), nrow(analdata)*0.7))
datatotal
train <- wine_data[datatotal, ]
test <- wine_data[-datatotal, ]
train_x <- train[, 1:13]
train_y <- train[, 14]
test_x <- test[, 1:13]
test_y <- test[, 14]
# Train
ctrl <- trainControl(method='repeatedcv', number=10, repeats=5)
library(caret)
install.packages("caret", dependencies = TRUE)
library(caret)
# Train
ctrl <- trainControl(method='repeatedcv', number=10, repeats=5)
library(caret)
install.packages("stringi")
library(caret)
library("stringi")
library("stringi")
library("stringi")
install.packages("stringi")
library(caret)
install.packages("caret", dependencies = TRUE)
library(caret)
install.packages('stringi')
library(caret)
install.packages("caret", dependencies = TRUE)
install.packages("stringi")
library(caret)
